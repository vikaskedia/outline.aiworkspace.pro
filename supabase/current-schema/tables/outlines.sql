-- Create outlines table
CREATE TABLE outlines (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    workspace_id bigint REFERENCES workspaces(id) ON DELETE CASCADE NOT NULL,
    title text NOT NULL,
    content jsonb NOT NULL DEFAULT '[]',
    created_by uuid REFERENCES auth.users(id) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    version integer DEFAULT 1 NOT NULL,
    render_id text
);

-- Create outline_versions table for history
CREATE TABLE outline_versions (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    outline_id bigint REFERENCES outlines(id) ON DELETE CASCADE NOT NULL,
    content jsonb NOT NULL,
    version integer NOT NULL,
    created_by uuid REFERENCES auth.users(id) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    comment text
);

-- Create indexes
CREATE INDEX outlines_workspace_id_idx ON outlines(workspace_id);
CREATE INDEX outlines_created_by_idx ON outlines(created_by);
CREATE INDEX outlines_render_id_idx ON outlines(render_id);
CREATE INDEX outline_versions_outline_id_idx ON outline_versions(outline_id);

-- Enable RLS
ALTER TABLE outlines ENABLE ROW LEVEL SECURITY;
ALTER TABLE outline_versions ENABLE ROW LEVEL SECURITY;

-- Policies for outlines
CREATE POLICY "Users can view outlines" ON outlines
FOR SELECT USING (
    workspace_id IN (
        SELECT workspace_id 
        FROMworkspace_access 
        WHERE shared_with_user_id = auth.uid()
    )
);

CREATE POLICY "Users can create outlines" ON outlines
FOR INSERT WITH CHECK (
    workspace_id IN (
        SELECT workspace_id 
        FROMworkspace_access 
        WHERE shared_with_user_id = auth.uid() 
        AND access_type = 'edit'
    )
);

CREATE POLICY "Users can update outlines" ON outlines
FOR UPDATE USING (
    workspace_id IN (
        SELECT workspace_id 
        FROMworkspace_access 
        WHERE shared_with_user_id = auth.uid() 
        AND access_type = 'edit'
    )
);

-- Policies for outline_versions
CREATE POLICY "Users can view outline versions" ON outline_versions
FOR SELECT USING (
    outline_id IN (
        SELECT id 
        FROM outlines 
        WHERE workspace_id IN (
            SELECT workspace_id 
            FROMworkspace_access 
            WHERE shared_with_user_id = auth.uid()
        )
    )
);

CREATE POLICY "Users can create outline versions" ON outline_versions
FOR INSERT WITH CHECK (
    outline_id IN (
        SELECT id 
        FROM outlines 
        WHERE workspace_id IN (
            SELECT workspace_id 
            FROMworkspace_access 
            WHERE shared_with_user_id = auth.uid() 
            AND access_type = 'edit'
        )
    )
);

-- Add triggers for updated_at
CREATE TRIGGER update_outlines_updated_at
    BEFORE UPDATE ON outlines
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 

-- Function to increment version number
CREATE OR REPLACE FUNCTION increment_version(outline_id bigint)
RETURNS integer
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    new_version integer;
BEGIN
    -- Get the current version and increment it
    SELECT version + 1 INTO new_version
    FROM outlines
    WHERE id = outline_id;

    -- Update the version
    UPDATE outlines
    SET version = new_version
    WHERE id = outline_id;

    RETURN new_version;
END;
$$;

-- Function to get latest version number
CREATE OR REPLACE FUNCTION get_latest_version(outline_id bigint)
RETURNS integer
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    latest_version integer;
BEGIN
    -- Get the current version
    SELECT version INTO latest_version
    FROM outlines
    WHERE id = outline_id;

    RETURN latest_version;
END;
$$; 